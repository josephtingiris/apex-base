#!/bin/bash

# This script will ... produce a release notes file from svn.

# 20151210, joseph.tingiris@gmail.com

# For coding conventions, organization, standards, & references, see: /base/README

MAIL_RECIPIENTS="root"

PATH=/bin:/usr/bin:/sbin:/usr/sbin

INCLUDE_FILE="base.bash"
INCLUDE_FOUND=0
INCLUDE_PATHS="$(dirname $0) $(pwd)"
for INCLUDE_PATH in $INCLUDE_PATHS; do
    if [ $INCLUDE_FOUND -eq 1 ]; then break; fi
    while [ ! -z "$INCLUDE_PATH" ]; do
        if [ "$INCLUDE_PATH" == "." ]; then INCLUDE_PATH=$(pwd -L .); fi
        if [ "$INCLUDE_PATH" == "/" ]; then break; fi
        if [ -r "$INCLUDE_PATH/include/$INCLUDE_FILE" ] && [ ! -d "$INCLUDE_PATH/include/$INCLUDE_FILE" ]; then
            INCLUDE_FOUND=1
            source "$INCLUDE_PATH/include/$INCLUDE_FILE"
            Debug "sourced $INCLUDE_PATH/include/$INCLUDE_FILE" 500
            unset INCLUDE_PATH INCLUDE_FILE
            break
        else
            INCLUDE_PATH=`dirname "$INCLUDE_PATH"`
        fi
    done
done
if [ $INCLUDE_FOUND -ne 1 ]; then echo "can't find $INCLUDE_FILE"; exit 1; fi

# GLOBAL_VARIABLES

export WHO=jtingiris

# explicit strings

DEFAULT_DATE=`date +%Y%m%d`

# explicit integers (0=off)

declare -i ACCOUNT_FLAG=0
declare -i DESCRIPTION_FLAG=0
declare -i INTERIM_FLAG=0
declare -i YES_FLAG=0

# Function_Names

function Notes() {
    Debug_Function $@

    # begin function logic

    if [ "$1" == "" ]; then
        local accounts="$ACCOUNTS"
    else
        local accounts="$1"
    fi

    for account in $accounts; do
        Debug_Variable account 10

        if [ "$ACCOUNT_DIR" == "" ]; then
            local account_dir="$BASE_DIR/account/$account"
        else
            local account_dir="$ACCOUNT_DIR/$account"
        fi
        Debug_Variable account_dir 10

        local notes_dir=$account_dir/notes

        if [ ! -d "$notes_dir" ]; then
            mkdir -p "$notes_dir"
        fi

        Debug_Variable notes_dir 10

        # hack -jjt
        export WEEKDAY=`date +%a`
        export RELEASE_WEEKDAY="Wed"
        if [ "$WEEKDAY" == "$RELEASE_WEEKDAY" ]; then
            export RELEASE=`date +%Y%m%d`
        else
            export RELEASE=`date --date="next $RELEASE_WEEKDAY" +%Y%m%d`
        fi

        if [ "$RELEASE" == "" ]; then
            local -i notes_date="$RELEASE"
        else
            local -i notes_date="$DEFAULT_DATE"
        fi
        Debug_Variable notes_date 10

        if [ $notes_date -ne 0 ]; then
            local -i notes_date_tomorrow=$(date --date=$notes_date\ tomorrow +%Y%m%d)
        else
            local -i notes_date_tomorrow=$notes_date
        fi
        Debug_Variable notes_date_tomorrow 10

        local notes_date_svn="{"$notes_date_tomorrow"}"
        Debug_Variable notes_date_svn 10

        local notes_descriptor="RELEASE.$account.$notes_date"
        if [ $INTERIM_FLAG -eq 1 ]; then
            notes_descriptor+=".interim"
        else
            notes_descriptor+=".full"
        fi
        Debug_Variable notes_descriptor 10

        if [ "$DESCRIPTION" == "" ]; then
            local notes_description="$notes_descriptor"
        else
            local notes_description="$DESCRIPTION"
        fi
        Debug_Variable notes_description 10

        local notes_file="$notes_dir/$notes_descriptor"
        Debug_Variable notes_file 10

        local notes_file_last=$(find "$notes_dir" -type f | grep RELEASE | grep -v "$notes_descriptor" | sort | tail -1)
        Debug_Variable notes_file_last 10

        if [ -f "$notes_file_last" ] && [ "$notes_file_last" != "" ]; then
            local -i notes_date_last=$(echo "$notes_file_last" | awk -F\/ '{print $NF}' | awk -F\. '{print $3}')
        fi
        if [ "$notes_date_last" == "" ]; then
            local -i notes_date_last=0
        fi
        Debug_Variable notes_date_last 10

        if [ $notes_date_last -eq 0 ]; then
            local notes_date_last_svn=0
        else
            local notes_date_last_svn="{"$notes_date_last"}"
        fi
        Debug_Variable notes_date_last_svn 10

        local notes=0
        if [ -f "$notes_file" ]; then
            Question "Re-create $notes_file"
            if [ "$QUESTION_FLAG" -eq 1 ]; then
                notes=1
            fi
        else
            notes=1
        fi
        Debug_Variable notes 10

        if [ $notes -eq 1 ]; then
            echo "Release Notes for $notes_descriptor" > $notes_file
            echo >> $notes_file
            echo >> $notes_file
            echo "DESCRIPTION" >> $notes_file
            echo "===========" >> $notes_file
            echo >> $notes_file
            echo "$notes_description" >> $notes_file
            echo >> $notes_file
            echo >> $notes_file
            echo "ACCOUNT FILES COMMITTED" >> $notes_file
            echo "=======================" >> $notes_file
            echo >> $notes_file
            if [ $VERBOSE_FLAG -eq 1 ]; then
                $SVN log "$account_dir" -r $notes_date_last_svn:$notes_date_svn --verbose >> $notes_file
            else
                $SVN log "$account_dir" -r $notes_date_last_svn:$notes_date_svn >> $notes_file
            fi
            echo >> $notes_file
            echo >> $notes_file
            echo "BASE FILES COMMITTED" >> $notes_file
            echo "====================" >> $notes_file
            echo >> $notes_file
            local base_files=$(find "$BASE_DIR" -maxdepth 1 | egrep -ve "^${BASE_DIR}$|^${BASE_DIR}/account|^${BASE_DIR}/.svn|^${BASE_DIR}/tmp")
            for base_file in $base_files; do
                Debug_Variable base_file 10
                if [ $VERBOSE_FLAG -eq 1 ]; then
                    $SVN log "$base_file" -r $notes_date_last_svn:$notes_date_svn --verbose >> $notes_file
                else
                    $SVN log "$base_file" -r $notes_date_last_svn:$notes_date_svn >> $notes_file
                fi
            done
        fi

        sed '$!N; /^\(.*\)\n\1$/!P; D' -i $notes_file

        local notes_dir_stat=$($SVN stat "$notes_dir" | grep \ "$notes_dir"$ | awk '{print $1}')
        Debug_Variable notes_dir_stat 10
        if [ "$notes_dir_stat" == "?" ]; then
            $SVN add "$notes_dir"
            $SVN commit "$notes_dir" -m "$notes_description"
        fi
        if [ "$notes_dir_stat" == "A" ] || [ "$notes_dir_stat" == "M" ]; then
            $SVN commit "$notes_dir" -m "$notes_description"
        fi

        local notes_file_stat=$($SVN stat "$notes_file" | head -1 | awk '{print $1}')
        Debug_Variable notes_file_stat 10
        if [ "$notes_file_stat" == "?" ]; then
            $SVN add "$notes_file"
            $SVN commit "$notes_file" -m "$notes_description"
        fi
        if [ "$notes_file_stat" == "A" ] || [ "$notes_file_stat" == "M" ]; then
            $SVN commit "$notes_file" -m "$notes_description"
        fi

        if [ "$notes_descriptor" == "$notes_description" ]; then
            local notes_subject="$notes_descriptor"
        else
            local notes_subject="$notes_descriptor [$notes_description]"
        fi
        cat "$notes_file" | mailx -s "Release Notes for $notes_subject" $MAIL_RECIPIENTS

    done



    # end function logic

    Debug_Function $@
}

function Usage() {
    Debug_Function $@

    local note="$1"

    # begin function logic

    echo
    echo "usage: $0 <options>"
    echo
    echo "options:"
    echo
    echo "  -D | --debug [level]        = print debug messages (less than) [level]"
    echo "  -H | --help                 = this message"
    echo
    echo "  -a|--account <value>        = use the given account acronym"
    echo "  -m|--description <value>    = use the given notes description"
    echo "  -i|--interim                = append '.interim' to the notes file"
    echo
    echo "  -v|--verbose                = increase verbosity"
    echo
    echo "  -y|--yes                    = automatically answer yes to all questions"
    echo
    if [ "$note" != "" ]; then
        echo "NOTE: $note"
        echo
    fi

    # end function logic

    Debug_Function $@

    Stop 1
}

# Validation Logic

# Options Logic

# call the base Options function (to process --debug, -debug, --help, -help, --usage, -usage, --verbose, -verbose)
Options $@

# expand upon the base Options function (careful, same named switches will be processed twice)

# for each command line argument, evaluate them case by case, process them, and shift to the next
for ((ARGUMENT=1; ARGUMENT <= $ARGUMENTS_TOTAL; ARGUMENT++)); do
    case "$1" in
        -H | --H)
            ARGUMENT_OPTION=("--help")
            Options ${ARGUMENT_OPTION[@]}
            unset ARGUMENT_OPTION
        ;;
        -D | --D)
            if [ "$2" != "" ] && [ ${2:0:1} != "-" ]; then
                ARGUMENT_OPTION=("--debug $2")
                shift
            else
                ARGUMENT_OPTION=("--debug")
            fi
            Options ${ARGUMENT_OPTION[@]}
            unset ARGUMENT_OPTION
        ;;
        -d | --days | -days)
            DAYS_FLAG=1
            DAYS="$2"
            if [ "$DAYS" != "" ] && [ ${DAYS:0:1} == "-" ]; then
                DAYS=""
            fi
            if [ "$DAYS" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DAYS=$2
                Debug_Variable DAYS 4 "$1 flag was set"
                shift
            fi
        ;;
        --account | -account | -a)
            ACCOUNT_FLAG=1
            ACCOUNT="$2"
            if [ "$ACCOUNT" != "" ] && [ ${ACCOUNT:0:1} == "-" ]; then
                ACCOUNT=""
            fi
            if [ "$ACCOUNT" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                ACCOUNT=$2
                Debug_Variable ACCOUNT 4 "$1 flag was set"
                shift
            fi
        ;;
        --description | -description | -m)
            DESCRIPTION_FLAG=1
            DESCRIPTION="$2"
            if [ "$DESCRIPTION" != "" ] && [ ${DESCRIPTION:0:1} == "-" ]; then
                DESCRIPTION=""
            fi
            if [ "$DESCRIPTION" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DESCRIPTION=$2
                Debug_Variable DESCRIPTION 4 "$1 flag was set"
                shift
            fi
        ;;
        --interim | -interim | -i)
            YES_FLAG=1
        ;;
        -v)
            # add a new switch to call an existing switch (that isn't handled)
            ARGUMENT_OPTION=("--verbose $2")
            Options ${ARGUMENT_OPTION[@]}
            unset ARGUMENT_OPTION
        ;;
        --yes | -yes | -y)
            YES_FLAG=1
        ;;
        *)
            # unknown flags
            if [ "$1" != "" ] && [ $OPTION -eq 0 ]; then
                echo "unknown flag '$1'"
                Stop 2 # not absolutely necessary, but does enforce proper usage
            fi
        ;;
    esac
    shift
done

#echo "ARGUMENTS=$ARGUMENTS"

# e.g., if there are no arguments, echo a usage message and/or exit
#if [ $ARGUMENTS_TOTAL -eq 0 ]; then Usage; fi

# Main Logic

Start

# do something

ACCOUNT_DIR="$BASE_DIR/account"
if [ ! -d "$ACCOUNT_DIR" ]; then
    Aborting "$ACCOUNT_DIR directory not found"
fi
Debug_Variable ACCOUNT_DIR 10

if [ "$ACCOUNT" == "" ]; then
    ACCOUNTS=$(ls "$ACCOUNT_DIR")
else
    ACCOUNTS="$ACCOUNT"
fi
ACCOUNTS=$(List_Unique "$ACCOUNTS")
Debug_Variable ACCOUNTS 10

Notes "$ACCOUNTS"

Stop 0
