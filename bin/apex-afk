#!/bin/bash

# This script will ... provide examples for how to use Apex, etc.


# begin Apex.bash.include

if [ "$Debug" == "" ]; then
    Debug=0
fi

Apex_Bashes="/apex/include/Apex.bash /base/include/Base.bash"
for Apex_Bash in $Apex_Bashes; do
    if [ -r "$Apex_Bash" ]; then
        source "$Apex_Bash"
        break
    fi
done

if [ ! -r "$Apex_Bash" ]; then
    echo "$Apex_Bash not readable"
    exit 1;
fi

# end Apex.bash.include

# Global_Variables

Afk_Threshold=3600

# explicit declarations

declare -x Version="0.1";

declare -i Return_Code=0

# functionNames

function apexAfk() {

    debugFunction $@

    # begin function logic

    local example_arg="$1"
    local example_variable="example variable"

    debugValue example_variable 2

    echo "example_arg=$example_arg, example_variable=$example_variable"

    # end function logic

    debugFunction $@

}

# Validation Logic

dependency "awk date find hostname sed"

# optionArguments Logic

# add usage help to the Apex_Usage array (before usage() is called for the first time [via optionArguments])

# supports an argument with one or more <value(s)>
Apex_Usage+=("-u | --user <name(s)> = Kill all processes associated with --user <name(s)>")
if [ "$USER" == "root" ]; then
    Apex_Usage+=("= Default for root is to kill all processes associated with all logins idle for more --threshold <minute(s)>")
else
    Apex_Usage+=("= Default for $USER is to kill all processes associated logins idle for more than --threshold <minute(s)>")
fi
Apex_Usage+=("") # blank link; seperator

# supports only one argument with a signle <value>
Apex_Usage+=("-t | --threshold <minute(s)> = Identify logins idle for more than --threshold <minute(s)>")
Apex_Usage+=("= Default is $Afk_Threshold minutes")
Apex_Usage+=("") # blank link; seperator

Apex_Usage+=("-m | --mutiple <value(s)> = supports an argument with one or more <value(s)>")
Apex_Usage+=("-s | --single <value> = supports only one argument with a single <value>")

# call the optionArguments function (to process common options, i.e. --debug, --help, --usage, --yes, etc)

optionArguments $@

# expand upon the optionArguments function (careful, same named switches will be processed twice)

# for each cli option (argument), evaluate them case by case, process them, and shift to the next

declare -i Users_Flag=1 # default off
declare -i Single_Flag=1 # default off

declare -i Restart_Flag=1 # default off
declare -i Start_Flag=1 # default off
declare -i Status_Flag=1 # default off
declare -i Stop_Flag=1 # default off

declare -i Option_Arguments_Index=0
declare -i Option_Arguments_Shift=0
for Option_Argument in ${Option_Arguments[@]}; do

    if [ $Option_Arguments_Shift -eq 1 ]; then
        ((Option_Arguments_Index++))
        Option_Arguments_Shift=0
        continue
    fi

    Option_Argument_Next="${Option_Arguments[$Option_Arguments_Index+1]}"

    case "$Option_Argument" in
        -m | --m | -multiple | --multiple)
            # supports an argument with one or more value(s)
            if [ "${Option_Argument_Next}" != "" ]; then
                if [ "${Option_Argument_Next:0:1}" == "-" ] || [ "${Option_Argument_Next}" == "restart" ] || [ "${Option_Argument_Next}" == "start" ] || [ "${Option_Argument_Next}" == "status" ] || [ "${Option_Argument_Next}" == "stop" ]; then
                    usage "${Option_Argument} requires a given value"
                else
                    declare Multiple+=" ${Option_Argument_Next}"
                    Option_Arguments_Shift=1
                fi
            fi
            Multiple="$(listUnique "$Multiple")"
            if [ "$Multiple" == "" ]; then
                usage "${Option_Argument} requires a valid value"
            fi
            Users_Flag=0
            debugValue Users_Flag 2 "$Option_Argument flag was set [$Multiple]"
            ;;

        -s | --s | -single | --single)
            # supports only one argument with a single value
            if [ $Single_Flag -eq 0 ]; then
                usage "$Option_Argument may only be given once"
            fi
            if [ "${Option_Argument_Next}" != "" ]; then
                if [ "${Option_Argument_Next:0:1}" == "-" ] || [ "${Option_Argument_Next}" == "restart" ] || [ "${Option_Argument_Next}" == "start" ] || [ "${Option_Argument_Next}" == "status" ] || [ "${Option_Argument_Next}" == "stop" ]; then
                    usage "${Option_Argument} requires a given value"
                else
                    declare Single+=" ${Option_Argument_Next}"
                    Option_Arguments_Shift=1
                fi
            fi
            Single="$(listUnique "$Single")"
            if [ "$Single" == "" ]; then
                usage "${Option_Argument} requires a valid value"
            fi
            Single_Flag=0
            debugValue Single_Flag 2 "$Option_Argument flag was set [$Single]"
            ;;

        restart)
            # supports 'restart' argument
            Restart_Flag=0
            ((Option_Arguments_Index++))
            debugValue Restart_Flag 2 "$Option_Argument flag was set"
            ;;

        start)
            # supports 'start' argument
            Start_Flag=0
            debugValue Start_Flag 2 "$Option_Argument flag was set"
            ;;

        status)
            # supports 'status' argument
            Status_Flag=0
            debugValue Status_Flag 2 "$Option_Argument flag was set"
            ;;

        stop)
            # supports 'stop' argument
            Stop_Flag=0
            debugValue Stop_Flag 2 "$Option_Argument flag was set"
            ;;

        *)
            # unsupported arguments
            if [ "$Option_Argument" != "" ]; then
                echo "unsupported argument '$Option_Argument'"
                apexFinish 2
            fi
            ;;
    esac

    ((Option_Arguments_Index++))
done
unset Option_Argument_Next Option_Arguments_Index Option_Arguments_Shift

# e.g., if there are no arguments, echo a usage message and/or exit

if [ $Apex_Arguments_Count -eq 0 ]; then usage; fi
if [ $Apex_Arguments_Count -eq 1 ] && [ $Debug_Flag -ne 1 ]; then usage; fi
if [ $Apex_Arguments_Count -eq 2 ] && [ $Debug_Flag -ne 1 ] && [ "$Debug" != "" ]; then usage; fi

# Main Logic

apexStart

echo "$0 starting ..."

if [ $Users_Flag -eq 0 ]; then
    echo "Multiple = $Multiple"
fi

if [ $Multiple_Optional_Flag -eq 0 ]; then
    echo "Multiple_Optional = $Multiple_Optional"
fi

if [ $One_Flag -eq 0 ]; then
    echo "One = $One"
fi

if [ $Single_Flag -eq 0 ]; then
    echo "Single = $Single"
fi

if [ $Single_Optional_Flag -eq 0 ]; then
    echo "Single_Optional = $Single_Optional"
fi

if [ $Restart_Flag -eq 0 ]; then
    Start_Flag=0
    Stop_Flag=0
fi

if [ $Start_Flag -eq 0 ]; then
    question "Are you ready to leave"
    if [ "$Question_Flag" -eq 0 ]; then
        echo "goodbye!"
    else
        echo "let's continue!"
    fi

    debugValue "Example" 1 "this is an example"

    if [ $Example_Flag -eq 0 ]; then
        apexAfk "$Example"
    fi
fi



debug "debug() 0 is always displayed" 1

echo "$0 ending ..."

end $Return_Code
