#!/bin/bash

# This script will ... alert for long running queries (et al).

# put in cron; e.g.
# 00 03 * * * root (/base/sbin/base-alert-db --host localhost --emails joseph.tingiris@gmail.com,jtingiris@gmail.com ) &>> /var/log/base-alert-db.log

# 20180822, jtingiris

# For coding conventions, organization, standards, & references, see: /base/README

PATH=/bin:/usr/bin:/sbin:/usr/sbin

INCLUDE_FILE="base.bash"
INCLUDE_FOUND=0
INCLUDE_PATHS="$(dirname $0) $(pwd)"
for INCLUDE_PATH in $INCLUDE_PATHS; do
    if [ $INCLUDE_FOUND -eq 1 ]; then break; fi
    while [ ! -z "$INCLUDE_PATH" ]; do
        if [ "$INCLUDE_PATH" == "." ]; then INCLUDE_PATH=$(pwd -L .); fi
        if [ "$INCLUDE_PATH" == "/" ]; then break; fi
        if [ -r "$INCLUDE_PATH/include/$INCLUDE_FILE" ] && [ ! -d "$INCLUDE_PATH/include/$INCLUDE_FILE" ]; then
            INCLUDE_FOUND=1
            source "$INCLUDE_PATH/include/$INCLUDE_FILE"
            Debug "sourced $INCLUDE_PATH/include/$INCLUDE_FILE" 500
            unset INCLUDE_PATH INCLUDE_FILE
            break
        else
            INCLUDE_PATH=`dirname "$INCLUDE_PATH"`
        fi
    done
done
if [ $INCLUDE_FOUND -ne 1 ]; then echo "can't find $INCLUDE_FILE"; exit 1; fi

set -f

# GLOBAL_VARIABLES

# explicit strings

DEFAULT_ALERT_EMAILS="root"
DEFAULT_ALERT_THRESHOLDS=1800 # seconds

DEFAULT_DATE=`date +%Y%m%d`

if [ -r "${BASE_DIR}/etc/base-backup-db.conf" ]; then
    source "${BASE_DIR}/etc/base-backup-db.conf"
else
    export DEFAULT_DB_HOSTS="localhost"
    export DEFAULT_DB_PASS=""
    export DEFAULT_DB_USER="$USER"
fi

# explicit integers (0=off)

declare -i ALERT_EMAILS_FLAG=0
declare -i DB_HOSTS_FLAG=0
declare -i DB_PASS_FLAG=0
declare -i DB_USER_FLAG=0

declare -i STDOUT_FLAG=0

declare -i RC=0

# Function_Names

function DB_Alert_Threshold() {
    if [ "$1" == "" ] || [ "$1" == "localhost" ] || [ "$1" == "127.0.0.1" ]; then
        local db_host=`hostname -s`
    else
        local db_host="$1"
    fi

    if [ "$2" != "" ]; then
        let local alert_thresholds="$2"
    else
        let local alert_thresholds="$ALERT_THRESHOLDS"
    fi

    local alert_body="$(echo "SELECT id,state,user,host,command,time,left(replace(info,'\n',' '),8192) FROM information_schema.processlist WHERE command <> 'Sleep'  AND info NOT LIKE '%PROCESSLIST%' AND time > $alert_thresholds ORDER BY time DESC;" | $MYSQL)"

    if [ "$alert_body" != "" ] ; then
        local alert_subject="!! ALERT !! mysql on $db_host has threads that have been running more than $alert_thresholds seconds."
        Debug_Variable alert_subject 3
        Debug_Variable alert_body 3
        local tmpfile=/tmp/$(basename $0).$(date +%Y%m%d%H%M%S.%N).tmp
        echo "$(date)" > $tmpfile
        echo >> $tmpfile
        echo "Hostname & Command:" >> $tmpfile
        echo >> $tmpfile
        echo "$COMMAND_ARGS" >> $tmpfile
        echo >> $tmpfile
        echo "Output:" >> $tmpfile
        echo >> $tmpfile
        echo "$alert_body" >> $tmpfile
        cat $tmpfile | mailx -s "$alert_subject" $ALERT_EMAILS
        rm $tmpfile
    fi
}

function Usage() {
    Debug_Function $@

    # begin function logic

    echo
    echo "usage: $0 <options>"
    echo
    echo "options:"
    echo
    echo "  -D | --debug [level]        = print debug messages (less than) [level]"
    echo "  -H | --help                 = this message"
    echo
    echo "  --hosts <value>             = use the given database host name(s) [DEFAULT=$DEFAULT_DB_HOSTS]"
    echo "  --password <value>          = use the given database password [DEFAULT=none]"
    echo "  --user <value>              = use the given database user name [DEFAULT=$DEFAULT_DB_USER]"
    echo
    echo "  --email <value>             = use the given email address(es) to send alerts to [DEFAULT=$DEFAULT_ALERT_EMAILS]"
    echo "  --threshold <value>         = use the given threshold, in seconds, to check for long running queries [DEFAULT=$DEFAULT_ALERT_THRESHOLDS]"
    echo
    echo "  --verbose                   = increase verbosity"
    echo
    if [ "$1" != "" ]; then
        echo "NOTE: $1"
        echo
    fi

    # end function logic

    Debug_Function $@

    Stop 1
}

# Validation Logic

# typically, Upgrade before Options, Start, etc
#Upgrade "$0" "/base/bin /usr/local/bin"

# Options Logic

# call the base Options function (to process --debug, -debug, --help, -help, --usage, -usage, --verbose, -verbose)
Options $@

# expand upon the base Options function (careful, same named switches will be processed twice)

# for each command line argument, evaluate them case by case, process them, and shift to the next
for ((ARGUMENT=1; ARGUMENT <= $ARGUMENTS_TOTAL; ARGUMENT++)); do
    case "$1" in
        -H | --H)
            ARGUMENT_OPTION=("--help")
            Options ${ARGUMENT_OPTION[@]}
            unset ARGUMENT_OPTION
            ;;
        -D | --D)
            if [ "$2" != "" ] && [ ${2:0:1} != "-" ]; then
                ARGUMENT_OPTION=("--debug $2")
                shift
            else
                ARGUMENT_OPTION=("--debug")
            fi
            Options ${ARGUMENT_OPTION[@]}
            unset ARGUMENT_OPTION
            ;;
        --emails | -emails | --email | -email | -e)
            ALERT_EMAILS_FLAG=1
            ALERT_EMAILS="$2"
            if [ "$ALERT_EMAILS" != "" ] && [ ${ALERT_EMAILS:0:1} == "-" ]; then
                ALERT_EMAILS=""
            fi
            if [ "$ALERT_EMAILS" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                ALERT_EMAILS=$2
                Debug_Variable DB_HOSTS_FLAG 4 "$1 flag was set"
                shift
            fi
            ;;
        --hosts | -hosts | --host | -host | -h)
            DB_HOSTS_FLAG=1
            DB_HOSTS="$2"
            if [ "$DB_HOSTS" != "" ] && [ ${DB_HOSTS:0:1} == "-" ]; then
                DB_HOSTS=""
            fi
            if [ "$DB_HOSTS" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DB_HOSTS=$2
                Debug_Variable DB_HOSTS_FLAG 4 "$1 flag was set"
                shift
            fi
            ;;
        --password | -password | --passwd | -passwd | -p)
            DB_PASS_FLAG=1
            DB_PASS="$2"
            if [ "$DB_PASS" != "" ] && [ ${DB_PASS:0:1} == "-" ]; then
                DB_PASS=""
            fi
            if [ "$DB_PASS" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DB_PASS=$2
                Debug_Variable DB_PASS_FLAG 4 "$1 flag was set"
                shift
            fi
            ;;
        --thresholds | -thresholds | --threshold | -threshold | -t)
            ALERT_THRESHOLDS_FLAG=1
            ALERT_THRESHOLDS="$2"
            if [ "$ALERT_THRESHOLDS" != "" ] && [ ${ALERT_THRESHOLDS:0:1} == "-" ]; then
                ALERT_THRESHOLDS=""
            fi
            if [ "$ALERT_THRESHOLDS" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                ALERT_THRESHOLDS=$2
                Debug_Variable DB_HOSTS_FLAG 4 "$1 flag was set"
                shift
            fi
            ;;
        --user | -user | -u)
            DB_USER_FLAG=1
            DB_USER="$2"
            if [ "$DB_USER" != "" ] && [ ${DB_USER:0:1} == "-" ]; then
                DB_USER=""
            fi
            if [ "$DB_USER" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DB_USER=$2
                Debug_Variable DB_USER_FLAG 4 "$1 flag was set"
                shift
            fi
            ;;
        *)
            # unknown flags
            if [ "$1" != "" ] && [ $OPTION -eq 0 ]; then
                echo "unknown flag '$1'"
                Stop 2 # not absolutely necessary, but does enforce proper usage
            fi
            ;;
    esac
    shift
done

#echo "ARGUMENTS=$ARGUMENTS"

# e.g., if there are no arguments, echo a usage message and/or exit
if [ $ARGUMENTS_TOTAL -eq 0 ]; then Usage; fi

# Main Logic

Start

# do something

COMMAND_ARGS="$HOSTNAME:$(readlink -e $0) $@"

if [ "$ALERT_EMAILS" == "" ]; then
    ALERT_EMAILS=$DEFAULT_ALERT_EMAILS
fi
Debug_Variable "ALERT_EMAILS" 1

if [ "$ALERT_THRESHOLDS" == "" ]; then
    let ALERT_THRESHOLDS=$DEFAULT_ALERT_THRESHOLDS
fi
Debug_Variable "ALERT_THRESHOLDS" 1

if [ "$DB_HOSTS" == "" ]; then
    DB_HOSTS=$DEFAULT_DB_HOSTS
fi
Debug_Variable "DB_HOSTS" 1

if [ "$DB_PASS" == "" ]; then
    DB_PASS=$DEFAULT_DB_PASS
fi

if [ "$DB_PASS" == "no" ]; then
    DB_PASS=""
fi

if [ "$DB_USER" == "" ]; then
    DB_USER=$DEFAULT_DB_USER
fi
Debug_Variable "DB_USER" 1

for DB_HOST in $DB_HOSTS; do
    if [ "$DB_HOST" == "" ]; then continue; fi
    Debug "-------------------------------------------------------------" 2
    Debug_Variable "DB_HOST" 1

    MYSQL="mysql --host=$DB_HOST --user=$DB_USER --password=$DB_PASS"
    Debug_Variable "MYSQL" 2

    DB_Alert_Threshold "$DB_HOST"
done

Stop $RC
