#!/bin/bash

# This script will ... backup a source directory (to a destination directory) with rdiff-backup

# 20160519, jtingiris

# For coding conventions, organization, standards, & references, see: /base/README

PATH=/bin:/usr/bin:/sbin:/usr/sbin

INCLUDE_FILE="base.bash"
INCLUDE_FOUND=0
INCLUDE_PATHS="$(dirname $0) $(pwd)"
for INCLUDE_PATH in $INCLUDE_PATHS; do
    if [ $INCLUDE_FOUND -eq 1 ]; then break; fi
    while [ ! -z "$INCLUDE_PATH" ]; do
        if [ "$INCLUDE_PATH" == "." ]; then INCLUDE_PATH=$(pwd -L .); fi
        if [ "$INCLUDE_PATH" == "/" ]; then break; fi
        if [ -r "$INCLUDE_PATH/include/$INCLUDE_FILE" ] && [ ! -d "$INCLUDE_PATH/include/$INCLUDE_FILE" ]; then
            INCLUDE_FOUND=1
            source "$INCLUDE_PATH/include/$INCLUDE_FILE"
            Debug "sourced $INCLUDE_PATH/include/$INCLUDE_FILE" 500
            unset INCLUDE_PATH INCLUDE_FILE
            break
        else
            INCLUDE_PATH=`dirname "$INCLUDE_PATH"`
        fi
    done
done
if [ $INCLUDE_FOUND -ne 1 ]; then echo "can't find $INCLUDE_FILE"; exit 1; fi

# GLOBAL_VARIABLES

# explicit declarations

declare -x DEFAULT_ADMIN_EMAIL="root"
declare -x DEFAULT_BACKUP_ROOT="/backup"
declare -x DEFAULT_CONFIG="$BASE_DIR/etc/${BASE_NAME}.conf"
declare -x DEFAULT_DESTINATIONS="localhost:$DEFAULT_BACKUP_ROOT/full/$(hostname -s)"
declare -i DEFAULT_REMOVE_DAYS=0
declare -x DEFAULT_SOURCES="localhost:/"

declare -i CONFIG_FLAG=0
declare -i DESTINATIONS_FLAG=0
declare -i REMOVE_DAYS_FLAG=0
declare -i SOURCES_FLAG=0
declare -i TEST_FLAG=0
declare -i YES_FLAG=0

declare -x VERSION="0.1";

# Function_Names

function Base_Backup() {
    Debug_Function $@

    # begin function logic

    local sources="$1"
    local destinations="$2"

    if [ "$sources" == "" ]; then
        Usage
    fi

    if [ "$destinations" == "" ]; then
        destinations="$DEFAULT_DESTINATIONS"
    fi

    if [ "$destinations" == "" ]; then
        Usage
    fi

    local -i remove_days=$REMOVE_DAYS

    Debug_Variable sources 20
    Debug_Variable destinations 20
    Debug_Variable remove_days 10

    local rdiff_backup_options=""
    rdiff_backup_options+=" --exclude-device-files"
    rdiff_backup_options+=" --exclude-fifos"
    rdiff_backup_options+=" --exclude-sockets"

    # mount | egrep -ve 'type ext[2-4]|type xfs |type vfat' | sed -nEe 's#^.*on (.*) type.*#\1#p')'
    local rdiff_exclude_directories=(/dev /media /net /proc /run /sys /nfs /backup/all /backup/local /mnt/dm-crypt-sdb/backup/local)
    rdiff_exclude_directories+=($(mount | egrep -ve 'type ext[2-4]|type xfs |type vfat' | sed -nEe 's#^.*on (.*) type.*#\1#p'))
    for rdiff_exclude_directory in ${rdiff_exclude_directories[@]}; do
        if [ -d "$rdiff_exclude_directory" ]; then
            rdiff_backup_options+=" --exclude $rdiff_exclude_directory"
        fi
    done

    if [ $DEBUG -lt 10 ]; then
        rdiff_backup_options+=" -v$DEBUG"
    else
        rdiff_backup_options+=" -v9"
    fi

    Debug_Variable rdiff_backup_options 30

    for destination in $destinations; do

        Debug "" 5
        Debug_Variable destination 5

        local destination_user=""
        destination_user=$(echo "$destination" | awk -F\@ '{print $1}' | egrep -ve "/|@|'|\"|\/")
        if [ "$destination_user" == "" ] || [ "$destination_user" == "$destination" ]; then
            if [ "$USER" != "" ]; then
                destination_user=$USER
            fi
        fi
        if [ "$destination_user" == "" ]; then
            if [ "$LOGNAME" != "" ]; then
                destination_user=$LOGNAME
            fi
        fi

        local destination_host=""
        destination_host=$(echo "$destination" | awk -F\@ '{print $2}' | egrep -ve "/|@|'|\"")
        if [ "$destination_host" == "" ]; then destination_host=$(echo "$destination" | awk -F: '{print $1}' | egrep -ve "/|@|'|\""); fi
        if [ "$destination_host" == "" ]; then destination_host="localhost"; fi

        destination_directory=$(echo "$destination" | awk -F: '{print $NF}')
        if [ "$destination_directory" == "" ]; then
            Warning "destination directory is NULL"
            continue
        fi

        for raw_source in $sources; do
            source=$(echo "$raw_source" | sed -e "s# ###g")

            if [ "$source" == "" ]; then
                Warning "source is NULL"
                continue
            fi

            Debug_Variable source 5

            local rdiff_backup_args="$rdiff_backup_options"
            rdiff_backup_args+=" --force"

            local rdiff_backup_to=""

            if [ "$destination_host" == "$HOSTNAME" ] || [ "$destination_host" == "localhost" ] || [ "$destination_host" == "127.0.0.1" ] || [ "$destination_host" == "::1" ]; then
                rdiff_backup_to="$destination_directory"
            else
                rdiff_backup_args+=" --create-full-path"
                if [ "$destination_user" != "" ]; then
                    rdiff_backup_to="${destination_user}@${destination_host}:${destination_directory}"
                else
                    rdiff_backup_to="${destination_host}:${destination_directory}"
                fi
            fi

            local rdiff_backup_from=""

            local source_user=""
            source_user=$(echo "$source" | awk -F\@ '{print $1}' | egrep -ve "/|@|'|\"")
            if [ "$source_user" == "" ] || [ "$source_user" == "$source" ]; then
                if [ "$USER" != "" ]; then
                    source_user=$USER
                fi
            fi
            if [ "$source_user" == "" ]; then
                if [ "$LOGNAME" != "" ]; then
                    source_user=$LOGNAME
                fi
            fi

            local source_host=""
            source_host=$(echo "$source" | awk -F\@ '{print $2}' | egrep -ve "/|@|'|\"")
            if [ "$source_host" == "" ]; then source_host=$(echo "$source" | awk -F: '{print $1}' | egrep -ve "/|@|'|\""); fi
            if [ "$source_host" == "" ]; then source_host="localhost"; fi

            local source_directory=""
            source_directory=$(echo "$source" | awk -F: '{print $NF}')
            if [ "$source_directory" == "$source_host" ]; then
                source_directory="/"
            fi
            if [ "$source_directory" == "" ]; then
                Warning "source directory is NULL"
                continue
            fi

            ping -c 2 "$source_host" &> /dev/null
            ping_exit=$?
            Debug_Variable ping_exit 2

            if [ $ping_exit -ne 0 ]; then
                Warning "$source host is not alive"
                continue;
            fi

            local regulation_source_host=$(echo $source_host | sed -e "s#private##g" -e "s#$BASE_DOMAIN##g" -e "s#\.\$##g")

            if [ "$regulation_source_host" == "" ] || [ "$regulation_source_host" == " " ]; then
                regulation_source_host=$source_host
            fi

            Debug_Variable regulation_source_host 2

            if [ "$source_host" == "$HOSTNAME" ] || [ "$source_host" == "localhost" ] || [ "$source_host" == "127.0.0.1" ] || [ "$source_host" == "::1" ]; then
                rdiff_backup_from="$source_directory"
                rdiff_backup_to+="/$HOSTNAME"
            else
                if [ "$destination_user" != "" ]; then
                    rdiff_backup_from="${destination_user}@${source_host}::${source_directory}"
                else
                    rdiff_backup_from="${source_host}::${source_directory}"
                fi
                rdiff_backup_to+="/"$(echo $source_host | sed -e "s#private###g" -e "s#$BASE_DOMAIN###g" -e "s#\.\$##g")
            fi

            if [ "$destination_host" == "$HOSTNAME" ] || [ "$destination_host" == "localhost" ] || [ "$destination_host" == "127.0.0.1" ] || [ "$destination_host" == "::1" ]; then
                if [ ! -d "$rdiff_backup_to" ]; then
                    mkdir -p "$rdiff_backup_to"
                    if [ $? -ne 0 ]; then
                        Warning "failed to mkdir $rdiff_backup_to"
                        continue
                    fi
                fi
            fi

            Debug_Variable source_user 3
            Debug_Variable source_host 3
            Debug_Variable source_directory 3

            Debug_Variable destination_user 3
            Debug_Variable destination_host 3
            Debug_Variable destination_directory 3

            Debug_Variable rdiff_backup_from 3
            Debug_Variable rdiff_backup_to 3

            # mount | egrep -e 'type ext[2-4] |type xfs |type vfat '
            if [ -d "${destination_directory}/${source_directory}" ]; then
                rdiff_backup_args+=" --exclude ${destination_directory}/${source_directory}"
            fi

            #rdiff_backup_args+=" --exclude ${source_directory}/${DEFAULT_BACKUP_ROOT}*"

            if [ "$rdiff_backup_from" != "" ] && [ "$rdiff_backup_from" != " " ]; then
                rdiff_backup_args+=" $rdiff_backup_from ${rdiff_backup_to}/${source_directory}"
            fi
            rdiff_backup_args=$(echo "$rdiff_backup_args" | sed -e "s#//#/#g" -e "s#//#/#g" -e "s#  # #g")

            Debug_Variable rdiff_backup_args 3

            echo "$(date) : $HOSTNAME backup from $rdiff_backup_from to $rdiff_backup_to ..."

            if [ $TEST_FLAG -eq 0 ]; then
                if [ $DEBUG -eq 0 ]; then
                    rdiff-backup $rdiff_backup_args &> /dev/null
                else
                    rdiff-backup $rdiff_backup_args
                fi
            else
                echo
                echo rdiff-backup $rdiff_backup_args
                echo
            fi
            local -i rdiff_backup_exit=$?
            Debug_Variable rdiff_backup_exit 3

            if [ $rdiff_backup_exit -ne 0 ]; then
                echo "$(date) : FAIL : rdiff-backup $rdiff_backup_args"
                local warning_message="$BASE_NAME backup failed on $HOSTNAME"
                Warning "$warning_message"
                #echo "$warning_message @ $(date)" | mail -s "$warning_message" $ADMIN_EMAIL
                warning_message=""
            fi

            if [ $remove_days -ne 0 ] && [ $rdiff_backup_exit -eq 0 ]; then
                local rdiff_backup_args=$(echo "--force --remove-older-than ${remove_days}D ${rdiff_backup_to}/${source_directory}" | sed -e "s#//#/#g" -e "s#//#/#g" -e "s#  # #g")
                Debug_Variable rdiff_backup_args 3

                echo "$(date) : $HOSTNAME remove from $rdiff_backup_from in $rdiff_backup_to older than $remove_days days ..."

                if [ $TEST_FLAG -eq 0 ]; then
                    if [ $DEBUG -eq 0 ]; then
                        rdiff-backup $rdiff_backup_args &> /dev/null
                    else
                        rdiff-backup $rdiff_backup_args
                    fi
                else
                    echo
                    echo rdiff-backup $rdiff_backup_args
                    echo
                fi
                local -i rdiff_backup_exit=$?
                Debug_Variable rdiff_backup_exit 3

                if [ $rdiff_backup_exit -ne 0 ]; then
                    echo "$(date) : FAIL : rdiff-backup $rdiff_backup_args"
                    local warning_message="$BASE_NAME remove failed on $HOSTNAME"
                    Warning "$warning_message"
                    echo "rdiff-backup $rdiff_backup_args" | mail -s "$warning_message" $ADMIN_EMAIL
                    warning_message=""
                fi

            fi

            Debug "" 3
            Debug "$rdiff_backup_from from $rdiff_backup_to finished" 3
            Debug "" 3
            Debug "" 3

        done

        Debug "$destination finished" 2

    done

    # end function logic

    Debug_Function $@
}

function Usage() {
    Debug_Function $@

    local note="$1"

    # begin function logic

    echo
    echo "usage: $0 <options>"
    echo
    echo "options:"
    echo
    # these are handled in base.bash; useful to know though ...
    echo "  -D | --debug [level]           = print debug messages (less than) [level]"
    echo "  -H | --help                    = print this message"
    echo "  -V | --version                 = print version"
    echo
    # these must be handled in this script; please keep usage messages accurate
    echo
    echo "  -c | --config [file]           = use configuration file for source & destination         (default=$DEFAULT_CONFIG)"
    echo
    echo "  -r | --remove [days]           = remove existing backup(s) files older than [days]       (default=$DEFAULT_REMOVE_DAYS [none])"
    echo
    echo "  -f | --from [[[user@]hostname|IP]::source_directory] = backup from the given sources     (default=$DEFAULT_SOURCES)"
    echo "  -t | --to [[[user@]hostname|IP]::backup_directory]   = backup to the given destinations  (default=$DEFAULT_DESTINATIONS)"
    echo

    if [ "$note" != "" ]; then
        echo "NOTE: $note"
        echo
    fi

    # end function logic

    Debug_Function $@

    Stop 1
}

# Validation Logic

# typically, Upgrade before Options, Start, etc
#Upgrade "$0" "/base/bin /usr/local/bin"

# Options Logic

# call the base Options function (to process --debug, -debug, --help, -help, --usage, -usage, --verbose, -verbose)
Options $@

# expand upon the base Options function (careful, same named switches will be processed twice)

# for each command line argument, evaluate them case by case, process them, and shift to the next
for ((ARGUMENT=1; ARGUMENT <= $ARGUMENTS_TOTAL; ARGUMENT++)); do
    case "$1" in
        -c | --config | -config)
            CONFIG_FLAG=1
            if [ "$2" != "" ] && [ ${2:0:1} == "-" ]; then
                CONFIG="$DEFAULT_CONFIG"
            else
                if [ "$2" == "" ]; then
                    CONFIG="$DEFAULT_CONFIG"
                else
                    CONFIG="$2"
                    Debug_Variable CONFIG 4 "$1 flag was set"
                    shift
                fi
            fi
            ;;
        -f | --from | -from | -s | --source | -source | --sources | --source)
            SOURCES_FLAG=1
            if [ "$2" != "" ] && [ ${2:0:1} == "-" ]; then
                SOURCES+=" $DEFAULT_SOURCES"
            else
                if [ "$2" == "" ]; then
                    SOURCES+=" $DEFAULT_SOURCES"
                else
                    SOURCES+=" $2"
                    Debug_Variable SOURCES 4 "$1 flag was set"
                    shift
                fi
            fi
            ;;
        -r | --remove | -remove)
            REMOVE_DAYS_FLAG=1
            if [ "$2" != "" ] && [ ${2:0:1} == "-" ]; then
                declare -i REMOVE_DAYS="$DEFAULT_REMOVE_DAYS"
            else
                if [ "$2" == "" ]; then
                    declare -i REMOVE_DAYS="$DEFAULT_REMOVE_DAYS"
                else
                    declare -i REMOVE_DAYS="$2"
                    Debug_Variable REMOVE_DAYS 4 "$1 flag was set"
                    shift
                fi
            fi
            ;;
        -t | --to | -to | -d | --destination | -destination | --destinations | --destination)
            DESTINATIONS_FLAG=1
            if [ "$2" != "" ] && [ ${2:0:1} == "-" ]; then
                DESTINATIONS+=" $DEFAULT_DESTINATIONS"
            else
                if [ "$2" == "" ]; then
                    DESTINATIONS+=" $DEFAULT_DESTINATIONS"
                else
                    DESTINATIONS+=" $2"
                    Debug_Variable DESTINATIONS 4 "$1 flag was set"
                    shift
                fi
            fi
            ;;
        -y | --yes | -yes)
            YES_FLAG=1
            Debug_Variable YES 4 "$1 flag was set"
            ;;
        -T | --test | -test)
            TEST_FLAG=1
            Debug_Variable TEST_FLAG 4 "$1 flag was set"
            ;;
        *)
            # unknown flags
            if [ "$1" != "" ] && [ $OPTION -eq 0 ]; then
                echo "unknown flag '$1'"
                Stop 2 # not absolutely necessary, but does enforce proper usage
            fi
            ;;
    esac
    shift
done

SOURCES=$(List_Unique "$SOURCES")
DESTINATIONS=$(List_Unique "$DESTINATIONS")

#echo "ARGUMENTS=$ARGUMENTS"

# e.g., if there are no arguments, echo a usage message and/or exit
if [ $ARGUMENTS_TOTAL -eq 0 ]; then Usage; fi

# Main Logic

Start

Dependency "ping rdiff-backup rsync svn"

Debug_Variable ARGUMENTS 1

if [ "$ADMIN_EMAIL" == "" ]; then
    ADMIN_EMAIL=devops
fi

Debug_Variable ADMIN_EMAIL 1

Debug_Variable BASE_DIR_0 1
Debug_Variable BASE_NAME 1

if [ $CONFIG_FLAG -eq 0 ] && [ $SOURCES_FLAG -eq 0 ] && [ $DESTINATIONS_FLAG -eq 0 ]; then
    Usage "must specific at least one argument of -c, -f, or -t"
fi

declare -i BASE_BACKUP_PID=$$
Debug_Variable BASE_BACKUP_PID 1

declare -i BASE_BACKUP_PID_OLDEST=$(pgrep -ox $BASE_NAME)
Debug_Variable BASE_BACKUP_PID_OLDEST 1

if [ "$HOSTNAME" == "" ]; then HOSTNAME="localhost"; fi

Debug_Variable HOSTNAME 1

if [ $BASE_BACKUP_PID -ne $BASE_BACKUP_PID_OLDEST ]; then
    pgrep -x $BASE_NAME
    if [ $TEST_FLAG -eq 0 ]; then
        Aborting "another $BASE_NAME is currently running (pid=$BASE_BACKUP_PID_OLDEST)"
    fi
fi

if [ "$REMOVE_DAYS" == "" ]; then
    declare -i REMOVE_DAYS="$DEFAULT_REMOVE_DAYS"
fi
Debug_Variable "REMOVE_DAYS" 1

if [ "$CONFIG" == "" ]; then
    CONFIG="$DEFAULT_CONFIG"
fi

if [ $CONFIG_FLAG -eq 1 ] && [ "$CONFIG" != "" ]; then

    if [ ! -f "$CONFIG" ]; then
        Aborting "config $CONFIG file not found" 1
    else
        Debug_Variable CONFIG 3
        svn up "$CONFIG" &> /dev/null

        CONFIG_LINES=$(cat "$CONFIG" | grep -v ^\# | egrep -e "^localhost:|^localhost=|^${HOSTNAME}:|^${HOSTNAME}=")

            if [ "$CONFIG_LINES" == "" ]; then
                Aborting "no configuration for localhost or $HOSTNAME"
            fi

            OIFS=$IFS
            IFS=$'\n'
            for CONFIG_LINE in $CONFIG_LINES; do
                IFS=$OIFS
                CONFIG_DESTINATIONS=$(echo "$CONFIG_LINE" | awk -F= '{print $1}' | sed -e "/,/s// /g")
                CONFIG_SOURCES=$(echo "$CONFIG_LINE" | awk -F= '{print $NF}' | sed -e "/,/s// /g")
                CONFIG_SOURCES=$(List_Unique "$CONFIG_SOURCES")
                CONFIG_DESTINATIONS=$(List_Unique "$CONFIG_DESTINATIONS")
                Debug_Variable CONFIG_LINE 20
                if [ "$CONFIG_DESTINATIONS" != "" ] && [ "$CONFIG_SOURCES" != "" ]; then
                    Debug_Variable CONFIG_DESTINATIONS 4
                    Debug_Variable CONFIG_SOURCES 4
                    Base_Backup "$CONFIG_SOURCES" "$CONFIG_DESTINATIONS"
                fi
                CONFIG_LINE=""
                CONFIG_DESTIONATION=""
                CONFIG_SOURCES=""
            done
        fi
    fi

    if [ $SOURCES_FLAG -eq 0 ] || [ $DESTINATIONS_FLAG -eq 0 ]; then
        # must specific source AND destination, or stop
        Stop 0
    fi

    if [ "$SOURCES" == "" ]; then
        SOURCES="$DEFAULT_SOURCES"
    fi

    if [ "$DESTINATIONS" == "" ]; then
        DESTINATIONS="$DEFAULT_DESTINATIONS"
    fi

    SOURCES=$(List_Unique "$SOURCES")
    DESTINATIONS=$(List_Unique "$DESTINATIONS")

# do something

if [ $SOURCES_FLAG -ne 0 ] || [ $DESTINATIONS_FLAG -ne 0 ]; then
    Debug_Variable "SOURCES" 1
    Debug_Variable "DESTINATIONS" 1

    Base_Backup "$SOURCES" "$DESTINATIONS"
fi

Stop 0
