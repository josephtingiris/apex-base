#!/bin/bash

# This script will ... backup (mysqldump) and archive database(s) and table(s)

# put in cron; e.g.
# 00 03 * * * root (/base/sbin/base-backup-db --host localhost --full --remove 14) &>> /var/log/base-backup-db.log

# 20140920, jtingiris

# For coding conventions, organization, standards, & references, see: /base/README

PATH=/bin:/usr/bin:/sbin:/usr/sbin

INCLUDE_FILE="base.bash"
INCLUDE_FOUND=0
INCLUDE_PATHS="$(dirname $0) $(pwd)"
for INCLUDE_PATH in $INCLUDE_PATHS; do
    if [ $INCLUDE_FOUND -eq 1 ]; then break; fi
    while [ ! -z "$INCLUDE_PATH" ]; do
        if [ "$INCLUDE_PATH" == "." ]; then INCLUDE_PATH=$(pwd -L .); fi
        if [ "$INCLUDE_PATH" == "/" ]; then break; fi
        if [ -r "$INCLUDE_PATH/include/$INCLUDE_FILE" ] && [ ! -d "$INCLUDE_PATH/include/$INCLUDE_FILE" ]; then
            INCLUDE_FOUND=1
            source "$INCLUDE_PATH/include/$INCLUDE_FILE"
            Debug "sourced $INCLUDE_PATH/include/$INCLUDE_FILE" 500
            unset INCLUDE_PATH INCLUDE_FILE
            break
        else
            INCLUDE_PATH=`dirname "$INCLUDE_PATH"`
        fi
    done
done
if [ $INCLUDE_FOUND -ne 1 ]; then echo "can't find $INCLUDE_FILE"; exit 1; fi

set -f

# GLOBAL_VARIABLES

# explicit strings

declare -i DEFAULT_DB_ARCHIVE_REMOVE=0 # 0=disable, [integer] remove older than this many days

DEFAULT_DB_BACKUP_DIR="/backup/db"

DEFAULT_DATE=`date +%Y%m%d`

if [ -r "${BASE_DIR}/etc/$(basename $0).conf" ]; then
    source "${BASE_DIR}/etc/$(basename $0).conf"
else
    export DEFAULT_DB_HOSTS="localhost"
    export DEFAULT_DB_NAMES=""
    export DEFAULT_DB_TABLES=""
    export DEFAULT_DB_PASS=""
    export DEFAULT_DB_USER="$USER"
fi

# explicit integers (0=off)

declare -i DB_ARCHIVE_REMOVE_FLAG=0
declare -l DB_ARCHIVE_EXTENSION="dump.sql"

declare -i DB_BACKUP_DIR_FLAG=0
declare -i DB_FULL_FLAG=0
declare -i DB_HOSTS_FLAG=0
declare -i DB_INFO_FLAG=0
declare -i DB_TABLE_FLAG=0
declare -i DB_NAMES_FLAG=0
declare -i DB_QUICK_FLAG=0
declare -i DB_USER_FLAG=0

declare -i STDOUT_FLAG=0

declare -i RC=0

# Function_Names

function DB_Backup() {
    local db_host="$1"
    local db_localhost=0
    if [ "$db_host" == "" ]; then
        local db_host="localhost"
        local db_localhost=1
    fi
    if [ "$db_host" == "localhost" ] || [ "$db_host" == "127.0.0.1" ]; then
        local db_host=`hostname -s`
        local db_localhost=1
    else
        local db_host="$1"
    fi
    local database="$2"

    if [ $db_localhost -eq 1 ]; then
        local ps_mysqld=$(ps -ef | grep /usr/bin/mysqld 2> /dev/null | grep -v grep)
        if [ "$ps_mysqld" == "" ]; then
            exit 0
        fi
    fi

    if [ "$database" == "" ]; then
        database="*"
    fi

    local table="$3"

    local message="`date`, Host: $db_host, Database: $database"
    if [ "$table" != "" ]; then
     message+=", Table: $table"
    fi

    local mysql_dump="mysqldump --events -h $DB_HOST -u $DB_USER "
    if [ "$DB_PASS" != "" ]; then
        mysql_dump+="--password=$DB_PASS "
    fi

    if [ "$DB_QUICK_FLAG" -eq 1 ]; then
        mysql_dump+="--lock-table=false --quick "
    fi

    if [ "$database" == "*" ]; then
        mysql_dump+="--all-databases "
    else
        mysql_dump+="--databases $database "
    fi

    if [ "$table" != "" ]; then
        mysql_dump+="--tables $table "
    fi

    Debug_Variable "mysql_dump" 1

    local -i counter_dump=0
    local db_dump;

    while [ -f "$db_dump" ] || [ -f "${db_dump}.gz" ] || [ "$db_dump" == "" ]; do
        let counter_dump=$counter_dump+1
        db_dump="${BACKUP_DIR}/${BACKUP_DATE}-${db_host}-${counter_dump}"
        if [ "$database" == "" ]; then
            db_dump+="-*"
        else
            db_dump+="-$database"
        fi
        if [ "$table" != "" ]; then
            db_dump+="-$table"
        fi
        db_dump=`echo $db_dump | sed -e '/\ /s//+/g'`
        db_dump+="-"$DB_ARCHIVE_EXTENSION
    done
    Debug_Variable "db_dump" 1

    if [ "$db_dump" == "" ]; then
        Warning "null db dump file $db_dump"
        return
    fi
    $mysql_dump > "$db_dump"
    if [ $? -ne 0 ]; then
        Warning "$mysql_dump failed"
    fi
    if [ -f "$db_dump" ]; then
        gzip "$db_dump"
        if [ $? -ne 0 ]; then
            Aborting "gzip $db_dump failed"
        fi
        db_dump=${db_dump}.gz
    else
        Aborting "$db_dump file not found"
    fi
    message+=" Dump: $db_dump"
    echo "$message"
    if [ $STDOUT_FLAG -eq 1 ]; then
        gunzip -c "$db_dump"
    fi
}

function Example() {
    Debug_Function $@

    # begin function logic

    local example_arg="$1"
    local example_variable="example variable"

    Debug_Variable example_variable 2

    echo "example_arg=$example_arg, example_variable=$example_variable"

    # end function logic

    Debug_Function $@
}

function Usage() {
    Debug_Function $@

    # begin function logic

    echo
    echo "usage: $0 <options>"
    echo
    echo "options:"
    echo
    echo "  -D | --debug [level]        = print debug messages (less than) [level]"
    echo "  -H | --help                 = this message"
    echo
    echo "  --hosts <value>             = use the given database host name(s) [DEFAULT=$DEFAULT_DB_HOSTS]"
    echo "  --password <value>          = use the given database password [DEFAULT=none]"
    echo "  --user <value>              = use the given database user name [DEFAULT=$DEFAULT_DB_USER]"
    echo
    echo "  --full                      = perform a full backup of all hosts [don't backup] [DEFAULT=$DEFAULT_DB_HOSTS]"
    echo
    echo "  --remove <days>             = automatically remove archives older than <days>"
    echo
    echo "  --info                      = display database info [don't backup] [DEFAULT=$DEFAULT_DB_HOSTS]"
    echo
    echo "  --databases <value>         = backup the given database name(s) [DEFAULT=all databases]"
    echo "  --directory <value>         = use the given database backup directory [DEFAULT=$DEFAULT_DB_BACKUP_DIR]"
    echo "  --tables                    = backup only the given table name(s) [DEFAULT=all tables]"
    echo
    echo "  --quick                     = quick, non-locking backup only [DEFAULT=slow, locking]"
    echo "  --stdout                    = gunzip -c the dump to stdout after it's created"
    echo
    echo "  --verbose                   = increase verbosity"
    echo
    if [ "$1" != "" ]; then
        echo "NOTE: $1"
        echo
    fi

    # end function logic

    Debug_Function $@

    Stop 1
}

# Validation Logic

# typically, Upgrade before Options, Start, etc
#Upgrade "$0" "/base/bin /usr/local/bin"

# Options Logic

# call the base Options function (to process --debug, -debug, --help, -help, --usage, -usage, --verbose, -verbose)
Options $@

# expand upon the base Options function (careful, same named switches will be processed twice)

# for each command line argument, evaluate them case by case, process them, and shift to the next
for ((ARGUMENT=1; ARGUMENT <= $ARGUMENTS_TOTAL; ARGUMENT++)); do
    case "$1" in
        -H | --H)
            ARGUMENT_OPTION=("--help")
            Options ${ARGUMENT_OPTION[@]}
            unset ARGUMENT_OPTION
        ;;
        -D | --D)
            if [ "$2" != "" ] && [ ${2:0:1} != "-" ]; then
                ARGUMENT_OPTION=("--debug $2")
                shift
            else
                ARGUMENT_OPTION=("--debug")
            fi
            Options ${ARGUMENT_OPTION[@]}
            unset ARGUMENT_OPTION
        ;;
        --databases | -databases | --db | -db)
            DB_NAMES_FLAG=1
            DB_NAMES="$2"
            if [ "$DB_NAMES" != "" ] && [ ${DB_NAMES:0:1} == "-" ]; then
                DB_NAMES=""
            fi
            if [ "$DB_NAMES" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DB_NAMES=$2
                Debug_Variable DB_NAMES 4 "$1 flag was set"
                shift
            fi
        ;;
        --directory | -directory | --d | -d)
            DB_BACKUP_DIR_FLAG=1
            DB_BACKUP_DIR="$2"
            if [ "$DB_BACKUP_DIR" != "" ] && [ ${DB_BACKUP_DIR:0:1} == "-" ]; then
                DB_BACKUP_DIR=""
            fi
            if [ "$DB_BACKUP_DIR" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DB_BACKUP_DIR=$2
                Debug_Variable DB_BACKUP_DIR 4 "$1 flag was set"
                shift
            fi
        ;;
        --example | -example | -e)
            EXAMPLE_FLAG=1
            EXAMPLE="$2"
            if [ "$EXAMPLE" != "" ] && [ ${EXAMPLE:0:1} == "-" ]; then
                EXAMPLE=""
            fi
            if [ "$EXAMPLE" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                declare -i EXAMPLE=$2
                Debug_Variable EXAMPLE 4 "$1 flag was set"
                shift
            fi
        ;;
        --full | -full | -f)
            DB_FULL_FLAG=1
            Debug_Variable DB_FULL_FLAG 4 "$1 flag was set"
        ;;
        --hosts | -hosts | --host | -host | -h)
            DB_HOSTS_FLAG=1
            DB_HOSTS="$2"
            if [ "$DB_HOSTS" != "" ] && [ ${DB_HOSTS:0:1} == "-" ]; then
                DB_HOSTS=""
            fi
            if [ "$DB_HOSTS" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DB_HOSTS=$2
                Debug_Variable DB_HOSTS_FLAG 4 "$1 flag was set"
                shift
            fi
        ;;
        --info | -info | -i)
            DB_INFO_FLAG=1
            Debug_Variable DB_INFO_FLAG 4 "$1 flag was set"
        ;;
        --tables | -tables | -t)
            DB_TABLES_FLAG=1
            DB_TABLES="$2"
            if [ "$DB_TABLES" != "" ] && [ ${DB_TABLES:0:1} == "-" ]; then
                DB_TABLES=""
            fi
            if [ "$DB_TABLES" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DB_TABLES=$2
                Debug_Variable DB_TABLES_FLAG 4 "$1 flag was set"
                shift
            fi
        ;;
        --password | -password | --passwd | -passwd | -p)
            DB_PASS_FLAG=1
            DB_PASS="$2"
            if [ "$DB_PASS" != "" ] && [ ${DB_PASS:0:1} == "-" ]; then
                DB_PASS=""
            fi
            if [ "$DB_PASS" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DB_PASS=$2
                Debug_Variable DB_PASS_FLAG 4 "$1 flag was set"
                shift
            fi
        ;;
        --quick | -quick | -q)
            DB_QUICK_FLAG=1
            Debug_Variable DB_QUICK_FLAG 4 "$1 flag was set"
        ;;
        --remove | -remove | -r)
            DB_ARCHIVE_REMOVE_FLAG=1
            DB_ARCHIVE_REMOVE="$2"
            if [ "$DB_ARCHIVE_REMOVE" != "" ] && [ ${DB_ARCHIVE_REMOVE:0:1} == "-" ]; then
                DB_ARCHIVE_REMOVE=""
            fi
            if [ "$DB_ARCHIVE_REMOVE" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                declare -i DB_ARCHIVE_REMOVE=$2
                Debug_Variable DB_ARCHIVE_REMOVE 4 "$1 flag was set"
                shift
            fi
        ;;
        --stdout | -stdout | -s)
            STDOUT_FLAG=1
            Debug_Variable STDOUT_FLAG 4 "$1 flag was set"
        ;;
        --user | -user | -u)
            DB_USER_FLAG=1
            DB_USER="$2"
            if [ "$DB_USER" != "" ] && [ ${DB_USER:0:1} == "-" ]; then
                DB_USER=""
            fi
            if [ "$DB_USER" == "" ]; then
                Usage "$1 argument requires a given value"
            else
                DB_USER=$2
                Debug_Variable DB_USER_FLAG 4 "$1 flag was set"
                shift
            fi
        ;;
        *)
            # unknown flags
            if [ "$1" != "" ] && [ $OPTION -eq 0 ]; then
                echo "unknown flag '$1'"
                Stop 2 # not absolutely necessary, but does enforce proper usage
            fi
        ;;
    esac
    shift
done

#echo "ARGUMENTS=$ARGUMENTS"

# e.g., if there are no arguments, echo a usage message and/or exit
if [ $ARGUMENTS_TOTAL -eq 0 ]; then Usage; fi

# Main Logic

Start

# do something

if [ "$DB_HOSTS" == "" ]; then
    DB_HOSTS=$DEFAULT_DB_HOSTS
fi

if [ "$DB_NAMES" == "" ]; then
    DB_NAMES=$DEFAULT_DB_NAME
fi

if [ "$DB_PASS" == "" ]; then
    DB_PASS=$DEFAULT_DB_PASS
fi

if [ "$DB_PASS" == "no" ]; then
    DB_PASS=""
fi

if [ "$DB_USER" == "" ]; then
    DB_USER=$DEFAULT_DB_USER
fi

BACKUP_DATE=`date +%Y%m%d`
if [ "$BACKUP_DATE" == "" ]; then
    Aborting "can't set backup date" 2
fi
Debug_Variable "BACKUP_DATE" 1

Debug_Variable "DB_HOSTS" 1
Debug_Variable "DB_NAMES" 1
Debug_Variable "DB_USER" 1

for DB_HOST in $DB_HOSTS; do
    Debug "-------------------------------------------------------------" 2
    Debug_Variable "DB_HOST" 1

    INFO_CMD="mysql --host=$DB_HOST --user=$DB_USER --password=$DB_PASS"
    Debug_Variable "INFO_CMD" 2

    DATABASES=`echo "show databases;" | $INFO_CMD --skip-column-names`
    RC=$?
    if [ $RC -ne 0 ]; then
        Warning "could not connect to database on $DB_HOST"
        continue
    fi

    if [ $DB_INFO_FLAG -eq 1 ]; then
        if [ "$DATABASES" != "" ]; then
            for DATABASE in $DATABASES; do
                if [ "$DB_NAMES" == "" ]; then DB_NAMES=$DATABASES; fi
                for DB_NAME in $DB_NAMES; do
                    if [ "$DB_NAME" != "$DATABASE" ]; then continue; fi
                    echo "Host: $DB_HOST, Database: $DATABASE"
                    TABLES=`echo "show tables;" | $INFO_CMD --database=$DATABASE --skip-column-names`
                    for TABLE in $TABLES; do
                        if [ "$DB_TABLES" == "" ]; then DB_TABLES=$TABLES; fi
                        for DB_TABLE in $DB_TABLES; do
                            if [ "$DB_TABLE" != "$TABLE" ]; then continue; fi
                            echo "Host: $DB_HOST, Database: $DATABASE, Table: $DB_TABLE"
                        done
                    done
                    echo
                done
            done
        fi
        continue
    fi

    if [ "$DB_BACKUP_DIR" != "" ]; then
        # accept whatever directory is given on the cli
        BACKUP_DIR=$DB_BACKUP_DIR
    else
        # default appends hostname
        if [ "$DB_HOST" == "localhost" ]; then
            BACKUP_DIR=${DEFAULT_DB_BACKUP_DIR}/`hostname -s`
        else
            BACKUP_DIR=${DEFAULT_DB_BACKUP_DIR}/$DB_HOST
        fi
    fi

    if [ ! -d "$BACKUP_DIR" ]; then
        mkdir -p "$BACKUP_DIR"
        if [ $? -ne 0 ]; then
            Aborting "couldn't create backup directory $BACKUP_DIR" 3
        fi
        if [ ! -w "$BACKUP_DIR" ]; then
            Aborting "backup directory $BACKUP_DIR is not writable" 3
        fi
    fi
    Debug_Variable "BACKUP_DIR" 2

    if [ $DB_ARCHIVE_REMOVE_FLAG -eq 1 ] && [ $DB_ARCHIVE_REMOVE -gt 0 ]; then
        db_archives=$(find "${BACKUP_DIR}"/ -mtime +${DB_ARCHIVE_REMOVE} -type f | grep "$DB_ARCHIVE_EXTENSION" | sed -e '/ /s//+++++/g')
        for db_archive_raw in $db_archives; do
            db_archive=$(echo $db_archive_raw | sed -e '/+++++/s// /g')
            if [ -f "$db_archive" ] && [ ! -d "$db_archive" ]; then
                rm -f "$db_archive"
                exit_code=$?
                if [ $exit_code -eq 0 ]; then
                    echo "$db_archive removed"
                else
                    Aborting "$db_archive remove failed"
                fi
            else
                Aborting "$db_archive file not found"
            fi
        done
    fi

    if [ "$DATABASES" != "" ]; then
        for DATABASE in $DATABASES; do
            if [ "$DB_NAMES" == "" ]; then
                DB_Backup "$DB_HOST"
                break
            fi
            for DB_NAME in $DB_NAMES; do
                Debug "DATABASE=$DATABASE, DB_NAME=$DB_NAME" 3
                if [ "$DB_NAME" != "" ] && [ "$DB_NAME" != "$DATABASE" ]; then
                    Debug "Host: $DB_HOST, Database: $DATABASE (skip)" 4
                    continue
                else
                    if [ "$DB_TABLES" == "" ]; then
                        DB_Backup "$DB_HOST" "$DATABASE"
                    else
                        TABLES=`echo "show tables;" | $INFO_CMD --database=$DATABASE --skip-column-names`
                        for DB_TABLE in $DB_TABLES; do
                            for TABLE in $TABLES; do
                                if [ "$DB_TABLE" != "$TABLE" ]; then
                                    Debug "Host: $DB_HOST, Database: $DATABASE, Table: $TABLE (skip)" 6
                                    continue
                                else
                                    DB_Backup "$DB_HOST" "$DATABASE" "$TABLE"
                                fi
                            done
                        done
                    fi
                fi
            done
        done
    fi
done

Stop $RC
